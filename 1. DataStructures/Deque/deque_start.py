"""
    Queue - очередь
    Deque - двустороняя очередь (деки)
    Класс deque - по сути дела реализует двусвязный список, со всеми наборами операции:
    1)Добавление к граничным
    2)Удаление граничных
    3)Вставки и удаление промежуточных
    4)Доступ к произвольным элементам

    Добавление и удаление граничных элементов выполняется за O(1)
    Вставка и удаление промежучтоных элементов выполняется за O(n)
    Доступ к произвольным элементам требует O(n) операций
"""

# импортируем класс дек для организации двустронней очереди
from collections import deque

# создаем объект класса очереди
# deque - создаем очередь
deq = deque()  # создали пустую очередь
print(deq)

# очередь с набором элементов
deq_1 = deque([1, 2, 3, 4, 5])  # очередь неопределенный длины
print('deq_1: ', deq_1)

# очередь с набором элементов и с указанием максимальной длины очереди
# maxlen - максимальная длина очереди
deq_2 = deque([1, 2, 3, 4, 5], maxlen=5)
print('deq_2: ', deq_2)
# возникает вопрос: - Что будет если слева или справа добавть элементы?
# -Давайте проверим
# append, appendleft - добавить элемент в конец очереди, в начало
deq_2.append(6)  # добавляем в конец очереди
print('deq_2: ', deq_2)
deq_2.appendleft(0)  # добавляем в начало очереди
print('deq_2: ', deq_2)

# рассмотрим удаление элементов с очереди
# pop, popleft - удаление и возрат последнего элемента очереди, первого элемента
deq_3 = deque([1, 2, 3, 4, 5], maxlen=5)
deq_3.pop()  # удаляет самый правый элемент очереди
print('deq_3', deq_3)
deq_3.popleft()  # удаляет самый правый элемент очереди
print('deq_3', deq_3)
# помимо того что удаляют последний элемент из очереди, так еще его сразу же возвращает
# этот удаленный элемент из очереди
value_deq_3 = deq_3.pop()  # возвращем удаленный элемент из очереди
print('value_deq_3 =', value_deq_3)
value_deq_3 = deq_3.popleft()
print('value_deq_3 =', value_deq_3)
# Внимание!
# pop и popleft - генерируют ошибку, если очередь пустая! (IndexError)
deq_4 = deque()
try:
    value = deq_4.pop()
    print(value)
except IndexError as e:
    print(e)

# до этого рассматривали как добавлять по одному элементу, а если нам понадобиться добавить несколько элементов
# данную проблему решит extend()
# extend - позволяет добавить в очередь сразу несколько элементов
deq_5 = deque([1, 2, 3, 4, 5])
print('deq_5', deq_5)
arr = [6, 7, 8, 9]
deq_5.extend(arr)  # позволяет добавить в конец очереди сразу несколько элементов
print('deq_5', deq_5)
deq_5.extendleft((-3, -2, -1, 0))  # добавляем в начало очереди
# обратите внимание, что могу добавлять даже кортеж (можно прописать любой итеррируемый объект)
print('deq_5', deq_5)

# insert - позволяет вставлять элемент в произвольную позицию
# первый аргумент позиция, второй аргумент значение
# индексы от нуля, можно как положительную так и в отрицательную (добавит в конец, предпослед и т.д)
# можно указать несуществующие индексы тогда в зависимости в какую из сторон больше в тот конец и добавит
deq_6 = deque([1, 2, 3, 4, 5])
print('deq_6', deq_6)
deq_6.insert(1, 100)
print('deq_6', deq_6)
deq_6.insert(100, -100)
print('deq_6', deq_6)

# remove - удаление элемента по значению, первый элемент который встретиться удовлетворяет значению
deq_7 = deque([1, 2, 3, 4, 5, 3, 3])
print('deq_7', deq_7)
deq_7.remove(3)
print('deq_7', deq_7)

# clear - удаление всех элементов из очереди
deq_8 = deque([1, 2, 3, 4, 5, 3, 3])
print('deq_8', deq_8)
deq_8.clear()
print('deq_8', deq_8)

# copy - создание копии очереди
deq_9 = deque([1, 2, 3, 4, 5, 3, 3])
print('deq_9', id(deq_9))
deq_9_copy = deq_9.copy()
print('deq_9_copy', id(deq_9_copy))
