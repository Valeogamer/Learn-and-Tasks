# Паттерны или шаблоны разработки - это общие способы решения частных задач
# Singleton - одиночка - это класс который гарантирует что во всей системе
# существует всего один объект этого класса и кто бы как бы не называл, объект будет
# всегда один и тот же
# Для чего нужно? Для тяжелых весомых ресурсов. Чтобы из любой точки системы могли попасть к нашему объекту
# Singleton Одиночка - это шаблон представления глобального доступа к состоянию, объект всегда один
# Нужен для одной точки доступа к ресурсам/данным и для того чтобы ресурсовские задачи сделать 1 раз
# плюсы: 1 раз выполяем тяжелые задачи, имеет 1 вход для всей системы
# минусы: огромная глобальная переменна, общесистемная глобальная переменная
# доступная из всей системы
# Monostate - это шаблон предоставления глобального доступа к состоянию, объекта могут быть разные,
# но состояние одинаковое
# Каждый модуль в python - это singleton
class Singleton:
    instance = None  # ссылка на созданный объект

    # вот это уже настоящий конструктор
    # хотя и инит и называют конструктором, но оно уже работает с готовым объектом
    # каждый раз когда создаем объект, сначала вызыватся __new__ который сообственно создает объект в памяти
    # выделяя память и т.д. Инит просто инициализирует
    def __new__(cls):  # Конструктор
        if Singleton.instance is None:  # значит объектов еще нет и надо создавать
            Singleton.instance = super().__new__(cls)  # Создаем объект для нашего класса, выделяем память
        return Singleton.instance

    def _do_work(self):
        print('do some hard work')
        # parse database work with data/resourse etc.....
        self.data = 101


# Нам ведь не важно один и тот же объект, а важно состояние и был предложен паттерн
# MonoState
class Monostate:
    _shared_state = {}  # распределенное состояние, все делят одно состояние

    def __init__(self):
        self.__dict__ = self._shared_state  # Набор всех атрибутов объекта,
        # они будут общими и они будут одними и тем же
        if not self._shared_state:
            print('do some hard work')
            # parse database work with data/resourse etc.....
            self.data = 101


if __name__ == '__main__':
    # first = Singleton()
    # first._do_work()
    # print(first)
    # second = Singleton()
    # print(second)
    # # Сколько бы раз в разной части системы не создавали объект таким образом
    # # объект всегда будет один и тот же
    # print(first is second)  # проверка адресов памяти
    # print(first.data)
    # first.data = 102
    # print(second.data)  # у второго тоже поменялось, потому что это один и тот же объект
    first = Monostate()
    print(first)
    second = Monostate()
    print(second)
    print(first is second)  # проверка адресов памяти
    # Теперь объекты разные, но состояние одно и тоже
    print(first.data)
    first.data = 102
    print(second.data)
